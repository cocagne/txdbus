#!/usr/bin/env python3

from twisted.internet import reactor, defer

from txdbus           import client, objects, error
from txdbus.interface import DBusInterface, Method
from txdbus.objects   import dbusMethod


class MyObj (objects.DBusObject):

    iface1 = DBusInterface('org.example.MyIFace1',
                           Method('common'))

    iface2 = DBusInterface('org.example.MyIFace2',
                           Method('common'))

    dbusInterfaces = [iface1, iface2]

    def __init__(self, objectPath):
        super(MyObj, self).__init__(objectPath)

    @dbusMethod('org.example.MyIFace1', 'common')
    def dbus_common1(self):
        print 'iface1 common called!'

    @dbusMethod('org.example.MyIFace2', 'common')
    def dbus_common2(self):
        print 'iface2 common called!'


@defer.inlineCallbacks
def main():
    try:
        conn = yield client.connect(reactor)

        conn.exportObject( MyObj('/MultiInterfaceObject') )

        yield conn.requestBusName('org.example')

        print 'Object exported on bus name "org.example" with path /MultiInterfaceObject'

    except error.DBusException, e:
        print 'Failed to export object: ', e
        reactor.stop()
        
    
reactor.callWhenRunning( main )
reactor.run()

